#!/bin/bash


# Backup Avid projects and users to a local disk if present
# and also to a remote rsync server.
# For the remote backup, a few folders/files are added.

# Needs a configuration file named backup-avid.conf in the same
# directory as this script


######## FUNCTIONS ########

die() {
	echo "$@" 1>&2
	exit 1
}
warn() {
	echo "$@" 1>&2
}


######## INIT ########

## Read configuration from backup-avid.conf in same dir.
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
conf="$script_dir/backup-avid.conf"
(( $debug )) && echo "Reading configuration from $conf"

if [ ! -f "$conf" ]; then
	echo "Configuration file not found: $conf"
	exit 1
fi

source "$conf"

more_rsync_opt="$@"

# Remove trailing slashes, because we add them later. So it works the same
# whether the dirs defined in conf had slashes or not
for var in "local_projects" "local_users" "local_backup_dest" ; do
	eval "$var=\"\${$var/%\//}\""
done

(( $debug )) && echo "local_projects    = $local_projects"
(( $debug )) && echo "local_attic       = $local_attic"
(( $debug )) && echo "local_users       = $local_users"

(( $debug )) && echo "local_backup_dest = $local_backup_dest"

(( $debug )) && echo "rsync_user        = $rsync_user"
(( $debug )) && echo "rsync_server      = $rsync_server"
(( $debug )) && echo "rsync_dir         = $rsync_dir"

(( $debug )) && echo "password pfile    = $pfile"

(( $debug )) && echo "remote_dest_dir   = $remote_dest_dir"
(( $debug )) && echo "remote_dest_base  = $remote_dest_base"

(( $debug )) && echo "backupdir         = $backupdir"

if (( $debug )) && (( "${#additional_to_remote[@]}" )); then
                echo "additional_to_remote = ${additional_to_remote[@]}"
fi


declare -a list_ok
declare -a list_err


######## CHECK ########

[ -d "$local_projects" ] || die "*** ERROR: Source not found: $local_projects"
[ -d "$local_attic"    ] || die "*** ERROR: Source not found: $local_attic"
[ -d "$local_users"    ] || die "*** ERROR: Source not found: $local_users"


######## Local backup ########

echo ""
echo "Local Avid backup:"
echo "            $local_projects"
echo "            $local_attic"
echo "        and $local_users"
echo "    ==> to: $local_backup_dest/"
echo ""

if [ -d "$local_backup_dest" ]; then
	rsync -ai --progress --backup --backup-dir="$backupdir" --delete $more_rsync_opt \
		--exclude="_before-*"     \
		--exclude="AvidWebCache" \
		--exclude="WaveformCache" \
		--exclude="Statistics"    \
		--exclude=".DS_Store"     \
		"$local_projects"         \
		"$local_attic"            \
		"$local_users"            \
		"$local_backup_dest/"
	if [ $? -eq 0 ]; then
		echo ""
		echo "* OK local backup to $local_backup_dest"
		echo ""
		list_ok+=("* OK local backup to $local_backup_dest")
	else
		er=$?
		warn "ERROR $er with local backup"
		list_err+=("ERROR $er with local backup to $local_backup_dest")
	fi
else
    warn "*** Warning: Destination not found: $local_backup_dest"
	warn "Skipping local backup"
	list_err+=("ERROR with local backup: Destination not found: $local_backup_dest")
fi



######## Remote backup ########
(( $backup_to_remote )) || { warn "Skipping remote backup (not configured)"; exit; }

echo ""
echo "Remote Avid backup:"
echo "            $local_projects"
echo "            $local_attic"
echo "        and $local_users"
echo "    ==> to: $remote_dest_base/$remote_dest_dir/"
echo ""


if ! route -n get $rsync_server | grep -q gateway; then
	die "*** ERROR: No connection to server $rsync_server. Skipping remote backup"
fi

rsync -rti --compress --progress --backup --backup-dir="$backupdir" --delete $more_rsync_opt \
	--password-file="$pfile"  \
	--exclude="_before-*"     \
	--exclude="AvidWebCache"  \
	--exclude="WaveformCache" \
	--exclude="Statistics"    \
	--exclude="SearchData"    \
	--exclude=".DS_Store"     \
	"$local_projects"         \
	"$local_attic"            \
	"$local_users"            \
	$remote_dest_base/$remote_dest_dir


if [ $? -eq 0 ]; then
	echo ""
	echo "* OK backup to remote"
	echo ""
	list_ok+=("* OK backup to remote")
else
	er=$?
	warn "ERROR $er with backup to remote"
	list_err+=("ERROR $er with backup to remote")
fi

if [ "${#additional_to_remote[@]}" -gt 0 ]; then
	echo "Copying ${#additional_to_remote[@]} additional folder(s) to remote :"
	echo "${additional_to_remote[@]}"
	rsync -rti --compress --progress --backup --backup-dir="$backupdir" --delete $more_rsync_opt \
		--password-file="$pfile"     \
		--exclude="_before-*"        \
		--exclude=".DS_Store"        \
		-F                           \
		"${additional_to_remote[@]}" \
		$remote_dest_base/$remote_dest_dir

	if [ $? -eq 0 ]; then
		echo ""
		echo "* OK additional backup to remote"
		echo ""
		list_ok+=("* OK additional backup to remote")
	else
		er=$?
		warn "ERROR $er with additional backup to remote"
		list_err+=("ERROR $er with additional backup to remote")
	fi
fi

echo "SUMMARY :"
echo "OK :"
for msg in "${list_ok[@]}"; do
	echo "     $msg"
done
if (( "${#list_err[@]}" )); then
	echo "ERROR(S) :"
	for msg in "${list_err[@]}"; do
		echo "     $msg"
	done
fi

## TODO:
## - options
##		"/Users/Shared/bin" ?     \
##	- group excludes (same list for local and remote?)

## What was (in local backup)
#		--exclude="Shared Avid Projects/$remote_username/"  \
#	    --exclude="Avid Users/$remote_username/"  \

